# CDD v2.0 - Context-Driven Development Rules

## üéØ Vis√£o Geral do Projeto
Este √© o **Wiki Veloz**, uma plataforma de documenta√ß√£o colaborativa que resolve o problema de documenta√ß√£o fragmentada em organiza√ß√µes. O projeto segue a metodologia **CDD v2.0** (Context-Driven Development).

### Stack Principal
- **Backend**: Flask 2.3+ (Python 3.11+)
- **Frontend**: Vanilla JavaScript + Tailwind CSS
- **Database**: JSON files + Google Drive API
- **Deployment**: Heroku
- **Arquitetura**: Monol√≠tica ‚Üí Microservices (evolu√ß√£o)

## üìã Padr√µes CDD v2.0 Obrigat√≥rios

### Task IDs
- **Formato**: `[feature-name]-X.Y` (ex: `user-auth-1.1`)
- **Obrigat√≥rio**: Todas as tasks devem ter IDs √∫nicos
- **Tracking**: Use `npm run complete [task-id]` para marcar como conclu√≠da

### Estrutura de Arquivos
```
wiki-veloz/
‚îú‚îÄ‚îÄ app.py                    # Entry point
‚îú‚îÄ‚îÄ data/                     # JSON files (database)
‚îú‚îÄ‚îÄ templates/                # Flask templates
‚îú‚îÄ‚îÄ static/                   # Assets est√°ticos
‚îú‚îÄ‚îÄ tests/                    # Testes automatizados
‚îî‚îÄ‚îÄ .kiro/                    # CDD v2.0 structure
    ‚îú‚îÄ‚îÄ steering/             # Direcionamento estrat√©gico
    ‚îú‚îÄ‚îÄ patterns/             # Padr√µes de c√≥digo
    ‚îú‚îÄ‚îÄ scripts/              # Automa√ß√£o CDD
    ‚îî‚îÄ‚îÄ specs/                # Especifica√ß√µes
```

### Conven√ß√µes de Nomenclatura
- **Python**: `snake_case` (m√≥dulos, fun√ß√µes, vari√°veis)
- **JavaScript**: `camelCase` (fun√ß√µes, vari√°veis), `PascalCase` (componentes)
- **Arquivos**: `kebab-case` (diret√≥rios), `snake_case.py` (Python)
- **Constantes**: `UPPER_SNAKE_CASE`

## üîß Padr√µes T√©cnicos Espec√≠ficos

### Python (Flask)
```python
# Estrutura de rota obrigat√≥ria
@app.route('/api/endpoint', methods=['GET'])
@login_required
def endpoint_name():
    try:
        # Business logic
        result = service.method()
        return jsonify({
            'success': True,
            'data': result
        }), 200
    except Exception as e:
        logger.error(f"Error: {e}")
        return jsonify({
            'success': False,
            'message': 'Internal server error'
        }), 500

# Service pattern obrigat√≥rio
class ServiceName:
    def __init__(self):
        self.data_file = 'data/filename.json'
    
    def method_name(self):
        with open(self.data_file, 'r') as f:
            data = json.load(f)
        return data
```

### JavaScript (Frontend)
```javascript
// API client pattern
class ApiClient {
    static async request(endpoint, options = {}) {
        try {
            const response = await fetch(`/api/${endpoint}`, {
                headers: {
                    'Content-Type': 'application/json',
                    ...options.headers
                },
                ...options
            });
            
            const data = await response.json();
            
            if (!response.ok) {
                throw new Error(data.message || 'Request failed');
            }
            
            return data;
        } catch (error) {
            console.error('API request failed:', error);
            throw error;
        }
    }
}
```

### HTML/Templates
```html
<!-- Estrutura de template obrigat√≥ria -->
<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}Wiki Veloz{% endblock %}</title>
    <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-50">
    <nav class="bg-white shadow">
        <!-- Navigation -->
    </nav>
    
    <main class="container mx-auto px-4 py-8">
        {% block content %}{% endblock %}
    </main>
    
    <footer class="bg-gray-800 text-white py-4">
        <!-- Footer -->
    </footer>
</body>
</html>
```

## üéØ Padr√µes de Neg√≥cio

### User Management
- **Autentica√ß√£o**: Session-based com Flask
- **Roles**: admin, user
- **Storage**: JSON files em `data/users.json`
- **Security**: Password hashing obrigat√≥rio

### Content Management
- **Pages**: Markdown content em JSON
- **Versioning**: Hist√≥rico de vers√µes
- **Storage**: `data/pages.json`
- **Backup**: Google Drive autom√°tico

### File Management
- **Uploads**: PDFs para Google Drive
- **Storage**: `data/pdfs.json`
- **Integration**: Google Drive API
- **Backup**: Autom√°tico via API

### Notification System
- **Storage**: `data/notifications.json`
- **Types**: system, user, file
- **Delivery**: Email + in-app
- **Archiving**: Auto-archive ap√≥s 30 dias

## üö® Anti-Patterns (Proibidos)

### ‚ùå N√ÉO FA√áA
- **Hardcoded values**: Use environment variables
- **No error handling**: Sempre use try/catch
- **No validation**: Valide inputs sempre
- **No logging**: Log opera√ß√µes importantes
- **No tests**: Teste funcionalidades cr√≠ticas
- **Inline styles**: Use Tailwind classes
- **Large files**: M√°ximo 300 linhas por arquivo
- **Mixed languages**: Separe Python e JavaScript

### ‚úÖ SEMPRE FA√áA
- **Environment variables**: Para configura√ß√µes
- **Error handling**: Try/catch em todas as opera√ß√µes
- **Input validation**: Valide entrada sempre
- **Logging**: Log opera√ß√µes importantes
- **Testing**: Teste funcionalidades cr√≠ticas
- **Tailwind CSS**: Use classes utilit√°rias
- **Modular code**: Arquivos pequenos e focados
- **Type hints**: Para Python e TypeScript

## üîÑ Workflow CDD v2.0

### Para Nova Feature
1. **Criar especifica√ß√£o**: `cd .kiro/scripts && ./new-feature.sh feature-name`
2. **Preencher docs**: requirements.md, design.md, tasks.md
3. **Validar formato**: `npm run validate feature-name`
4. **Implementar**: Seguindo patterns em `.kiro/patterns/`
5. **Testar**: `python -m pytest tests/`
6. **Marcar progresso**: `npm run complete feature-name-X.Y`

### Para Bug Fix
1. **Identificar task**: `npm run list`
2. **Implementar fix**: Seguindo patterns
3. **Testar**: `python -m pytest tests/`
4. **Marcar conclu√≠do**: `npm run complete bug-fix-X.Y`

### Para Refatora√ß√£o
1. **Criar task**: `npm run scan`
2. **Refatorar**: Seguindo patterns
3. **Validar**: `npm run health`
4. **Marcar conclu√≠do**: `npm run complete refactor-X.Y`

## üìä Comandos CDD Essenciais

```bash
# Task Management
npm run scan              # Escanear tasks
npm run list              # Listar todas as tasks
npm run status            # Status do projeto
npm run complete [task-id] # Marcar task como conclu√≠da
npm run watch             # Monitorar mudan√ßas

# Validation & Health
npm run validate [feature] # Validar formato de tasks
npm run health            # Dashboard de sa√∫de
npm run backup            # Backup de tasks
npm run cleanup           # Limpeza semanal

# Development
python app.py             # Rodar aplica√ß√£o
python -m pytest tests/   # Rodar testes
npm run lint              # Linting (se configurado)
```

## üéØ M√©tricas de Sucesso

### Funcional
- [ ] Editor Markdown com preview
- [ ] Sistema de versionamento
- [ ] Integra√ß√£o Google Drive
- [ ] Sistema de notifica√ß√µes
- [ ] Analytics dashboard
- [ ] Backup autom√°tico

### T√©cnico
- [ ] Performance: < 2s carregamento
- [ ] Uptime: > 99.9%
- [ ] Seguran√ßa: Zero vulnerabilidades cr√≠ticas
- [ ] Escalabilidade: 1000+ usu√°rios

### Neg√≥cio
- [ ] 500 documentos/m√™s
- [ ] 200 usu√°rios ativos/m√™s
- [ ] NPS Score > 70
- [ ] 30-day retention > 85%

## üîó Integra√ß√µes

### Google Drive API
- **Escopo**: `https://www.googleapis.com/auth/drive.file`
- **Funcionalidades**: Upload, backup, versionamento
- **Configura√ß√£o**: Service account credentials
- **Rate limiting**: Implementado

### Heroku Deployment
- **Buildpack**: Python
- **Environment**: Production config
- **Logs**: `heroku logs --tail`
- **Monitoring**: Heroku metrics

## üìö Documenta√ß√£o

### Arquivos Importantes
- `README.md`: Documenta√ß√£o principal
- `.kiro/steering/product.md`: Vis√£o de produto
- `.kiro/steering/structure.md`: Organiza√ß√£o
- `.kiro/steering/tech.md`: Stack t√©cnico
- `.kiro/patterns/`: Padr√µes de c√≥digo

### Guias Espec√≠ficos
- `CREDENCIAIS_GOOGLE_DRIVE.md`: Configura√ß√£o Google Drive
- `SISTEMA_BACKUP.md`: Sistema de backup
- `SISTEMA_NOTIFICACOES.md`: Sistema de notifica√ß√µes
- `SISTEMA_PDFS.md`: Sistema de PDFs
- `ANALYTICS_GUIDE.md`: Guia de analytics

## üöÄ Pr√≥ximos Passos

### Fase 5: Integra√ß√£o (Atual)
- [ ] Configura√ß√£o de linting autom√°tico
- [ ] Integra√ß√£o CI/CD com CDD
- [ ] Treinamento da equipe
- [ ] Monitoramento de ado√ß√£o

### Fase 6: Evolu√ß√£o
- [ ] Migra√ß√£o para PostgreSQL
- [ ] Implementa√ß√£o de microservices
- [ ] Mobile app
- [ ] Enterprise features

---

**Lembre-se**: Este projeto segue **CDD v2.0** - sempre consulte os patterns em `.kiro/patterns/` antes de implementar novas funcionalidades! 