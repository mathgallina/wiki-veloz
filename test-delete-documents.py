#!/usr/bin/env python3
"""
Teste da funcionalidade de exclus√£o de documentos
Wiki Veloz - CDD v2.0
"""

import json
import os
from datetime import datetime

import requests

# Configura√ß√µes
BASE_URL = "http://localhost:8000"
ADMIN_USERNAME = "admin"
ADMIN_PASSWORD = "admin123"


def test_delete_documents():
    """Teste da funcionalidade de exclus√£o de documentos"""
    print("üß™ Testando funcionalidade de exclus√£o de documentos...")
    
    # 1. Login como admin
    print("\n1. Fazendo login como admin...")
    session = requests.Session()
    
    login_data = {
        "username": ADMIN_USERNAME,
        "password": ADMIN_PASSWORD
    }
    
    try:
        response = session.post(f"{BASE_URL}/auth/login", data=login_data)
        if response.status_code == 200:
            print("‚úÖ Login realizado com sucesso")
        else:
            print("‚ùå Erro no login")
            return False
    except Exception as e:
        print(f"‚ùå Erro de conex√£o: {e}")
        return False
    
    # 2. Listar documentos antes da exclus√£o
    print("\n2. Listando documentos antes da exclus√£o...")
    try:
        response = session.get(f"{BASE_URL}/documents/api/")
        if response.status_code == 200:
            data = response.json()
            if data.get("success") and data["data"]:
                documents_before = data["data"]
                print(f"‚úÖ Encontrados {len(documents_before)} documentos")
                
                # Pegar o primeiro documento para teste
                test_document = documents_before[0]
                print(f"üìÑ Documento para exclus√£o: {test_document['title']}")
                print(f"   ID: {test_document['id']}")
                print(f"   Filename: {test_document.get('filename', 'N/A')}")
                
                # 3. Testar exclus√£o do documento
                print(f"\n3. Testando exclus√£o do documento...")
                delete_url = f"{BASE_URL}/documents/{test_document['id']}"
                response = session.delete(delete_url)
                
                if response.status_code == 200:
                    result = response.json()
                    if result.get("success"):
                        print("‚úÖ Documento exclu√≠do com sucesso")
                        print(f"   Mensagem: {result.get('message', 'N/A')}")
                        
                        # 4. Verificar se o documento foi realmente exclu√≠do
                        print(f"\n4. Verificando se documento foi exclu√≠do...")
                        response = session.get(f"{BASE_URL}/documents/api/")
                        if response.status_code == 200:
                            data = response.json()
                            if data.get("success"):
                                documents_after = data["data"]
                                remaining_count = len(documents_after)
                                deleted_count = len(documents_before) - remaining_count
                                
                                print(f"‚úÖ Documentos restantes: {remaining_count}")
                                print(f"‚úÖ Documentos exclu√≠dos: {deleted_count}")
                                
                                # Verificar se o documento espec√≠fico foi exclu√≠do
                                document_still_exists = any(
                                    doc['id'] == test_document['id'] 
                                    for doc in documents_after
                                )
                                
                                if not document_still_exists:
                                    print("‚úÖ Documento foi completamente removido")
                                else:
                                    print("‚ùå Documento ainda existe na lista")
                                    return False
                            else:
                                print("‚ùå Erro ao verificar documentos ap√≥s exclus√£o")
                                return False
                        else:
                            print(f"‚ùå Erro HTTP {response.status_code} ao verificar documentos")
                            return False
                    else:
                        print(f"‚ùå Erro na exclus√£o: {result.get('message', 'Erro desconhecido')}")
                        return False
                else:
                    print(f"‚ùå Erro HTTP {response.status_code} na exclus√£o")
                    return False
                    
            else:
                print("‚ùå Nenhum documento encontrado para teste")
                return False
        else:
            print(f"‚ùå Erro ao listar documentos: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Erro ao testar exclus√£o: {e}")
        return False
    
    print("\nüéâ Teste de exclus√£o de documentos conclu√≠do com sucesso!")
    return True


def test_delete_nonexistent_document():
    """Teste de exclus√£o de documento inexistente"""
    print("\nüß™ Testando exclus√£o de documento inexistente...")
    
    session = requests.Session()
    
    # Login como admin
    login_data = {
        "username": ADMIN_USERNAME,
        "password": ADMIN_PASSWORD
    }
    
    try:
        response = session.post(f"{BASE_URL}/auth/login", data=login_data)
        if response.status_code != 200:
            print("‚ùå Erro no login para teste de documento inexistente")
            return False
    except Exception as e:
        print(f"‚ùå Erro de conex√£o: {e}")
        return False
    
    # Tentar excluir documento inexistente
    try:
        fake_id = "doc-nonexistent123"
        delete_url = f"{BASE_URL}/documents/{fake_id}"
        response = session.delete(delete_url)
        
        if response.status_code == 404:
            result = response.json()
            if not result.get("success"):
                print("‚úÖ Exclus√£o de documento inexistente tratada corretamente")
                return True
            else:
                print("‚ùå Documento inexistente foi exclu√≠do incorretamente")
                return False
        else:
            print(f"‚ùå Status code inesperado: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Erro ao testar exclus√£o de documento inexistente: {e}")
        return False


def test_delete_without_permission():
    """Teste de exclus√£o sem permiss√£o"""
    print("\nüß™ Testando exclus√£o sem permiss√£o...")
    
    session = requests.Session()
    
    # Tentar excluir sem login
    try:
        fake_id = "doc-test123"
        delete_url = f"{BASE_URL}/documents/{fake_id}"
        response = session.delete(delete_url)
        
        if response.status_code in [401, 403]:
            print("‚úÖ Acesso negado corretamente para usu√°rio n√£o autenticado")
            return True
        else:
            print(f"‚ùå Acesso n√£o foi negado: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Erro no teste de permiss√£o: {e}")
        return False


if __name__ == "__main__":
    print("üöÄ Iniciando testes da funcionalidade de exclus√£o de documentos")
    print("=" * 60)
    
    # Teste principal
    success1 = test_delete_documents()
    
    # Teste de documento inexistente
    success2 = test_delete_nonexistent_document()
    
    # Teste de permiss√£o
    success3 = test_delete_without_permission()
    
    print("\n" + "=" * 60)
    if success1 and success2 and success3:
        print("‚úÖ Todos os testes de exclus√£o passaram!")
    else:
        print("‚ùå Alguns testes de exclus√£o falharam")
    
    print("\nüìã Resumo da corre√ß√£o implementada:")
    print("‚úÖ Corre√ß√£o do erro join() com NoneType")
    print("‚úÖ Verifica√ß√£o de filename antes de excluir arquivo")
    print("‚úÖ Tratamento de documentos sem arquivo anexado")
    print("‚úÖ Exclus√£o segura de documentos")
    print("‚úÖ Valida√ß√£o de permiss√µes mantida")
    print("‚úÖ Log de atividades preservado") 