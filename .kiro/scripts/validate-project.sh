#!/bin/bash

# validate-project.sh - Script para validar estrutura CDD completa
# Uso: ./validate-project.sh [--fix]

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

# Flags
FIX_MODE=false
ERRORS=0
WARNINGS=0

# Parse arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --fix)
            FIX_MODE=true
            shift
            ;;
        -h|--help)
            echo "Uso: $0 [--fix]"
            echo ""
            echo "Op√ß√µes:"
            echo "  --fix    Tentar corrigir problemas automaticamente"
            echo "  -h       Mostrar esta ajuda"
            exit 0
            ;;
        *)
            echo "Op√ß√£o desconhecida: $1"
            exit 1
            ;;
    esac
done

# Fun√ß√µes para output colorido
print_header() {
    echo -e "\n${PURPLE}üîç $1${NC}"
    echo "=================================="
}

print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
    ((WARNINGS++))
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
    ((ERRORS++))
}

print_fix() {
    echo -e "${GREEN}üîß $1${NC}"
}

# Fun√ß√£o para criar diret√≥rio se n√£o existir
ensure_directory() {
    local dir="$1"
    local description="$2"
    
    if [ ! -d "$dir" ]; then
        if [ "$FIX_MODE" = true ]; then
            mkdir -p "$dir"
            print_fix "Criado diret√≥rio: $dir"
        else
            print_error "Diret√≥rio obrigat√≥rio n√£o encontrado: $dir ($description)"
        fi
    else
        print_success "Diret√≥rio encontrado: $dir"
    fi
}

# Fun√ß√£o para criar arquivo se n√£o existir
ensure_file() {
    local file="$1"
    local description="$2"
    local template_content="$3"
    
    if [ ! -f "$file" ]; then
        if [ "$FIX_MODE" = true ]; then
            if [ -n "$template_content" ]; then
                echo "$template_content" > "$file"
                print_fix "Criado arquivo: $file"
            else
                touch "$file"
                print_fix "Criado arquivo vazio: $file"
            fi
        else
            print_error "Arquivo obrigat√≥rio n√£o encontrado: $file ($description)"
        fi
    else
        print_success "Arquivo encontrado: $file"
    fi
}

# Verificar se estamos no diret√≥rio correto
print_header "VERIFICA√á√ÉO DE LOCALIZA√á√ÉO"

if [ ! -d ".kiro" ]; then
    print_error "Diret√≥rio .kiro n√£o encontrado!"
    print_info "Este script deve ser executado no diret√≥rio raiz do projeto"
    exit 1
fi

print_success "Executando no diret√≥rio correto (encontrado .kiro/)"

# Verificar estrutura base do CDD
print_header "ESTRUTURA BASE CDD"

# Diret√≥rios obrigat√≥rios
ensure_directory ".kiro/steering" "Documentos de direcionamento do projeto"
ensure_directory ".kiro/specs" "Especifica√ß√µes de funcionalidades"
ensure_directory ".kiro/specs/_template" "Templates para novas features"

# Verificar se patterns existe (recomendado)
if [ ! -d ".kiro/patterns" ]; then
    print_warning "Diret√≥rio .kiro/patterns n√£o encontrado (recomendado para projetos maduros)"
    if [ "$FIX_MODE" = true ]; then
        mkdir -p ".kiro/patterns"
        print_fix "Criado diret√≥rio: .kiro/patterns"
    fi
else
    print_success "Diret√≥rio encontrado: .kiro/patterns"
fi

# Verificar arquivos de steering
print_header "DOCUMENTOS DE STEERING"

# Templates para arquivos de steering
product_template='# [Nome do Projeto] - Vis√£o de Produto

## Problema que Resolve
[Descreva o problema que o projeto resolve]

## Solu√ß√£o Proposta
[Descreva a solu√ß√£o e valor √∫nico]

## Objetivos de Neg√≥cio
[Defina m√©tricas de sucesso e KPIs]

## Usu√°rios-Alvo
[Identifique personas e casos de uso]'

structure_template='# Organiza√ß√£o & Estrutura de Pastas

## Filosofia de Organiza√ß√£o
[Explique os princ√≠pios que guiam a organiza√ß√£o]

## Estrutura de Diret√≥rios
```
projeto/
‚îú‚îÄ‚îÄ src/           # C√≥digo principal
‚îú‚îÄ‚îÄ docs/          # Documenta√ß√£o
‚îú‚îÄ‚îÄ tests/         # Testes
‚îî‚îÄ‚îÄ config/        # Configura√ß√µes
```

## Conven√ß√µes
[Defina padr√µes de nomenclatura e organiza√ß√£o]'

tech_template='# Stack Tecnol√≥gico e Decis√µes T√©cnicas

## Stack Principal
[Liste as tecnologias principais e suas justificativas]

## Ferramentas de Desenvolvimento
[Ferramentas para desenvolvimento, build, deploy]

## Configura√ß√µes Essenciais
[Comandos e configura√ß√µes importantes]

## Decis√µes Arquiteturais
[Documente decis√µes t√©cnicas importantes]'

ensure_file ".kiro/steering/product.md" "Vis√£o de produto" "$product_template"
ensure_file ".kiro/steering/structure.md" "Estrutura do projeto" "$structure_template"
ensure_file ".kiro/steering/tech.md" "Stack tecnol√≥gico" "$tech_template"

# Verificar templates
print_header "TEMPLATES DE ESPECIFICA√á√ÉO"

requirements_template='# [Nome da Funcionalidade] - Requisitos

## Vis√£o Geral
[Descri√ß√£o geral da funcionalidade]

## Requisitos Funcionais

### RF01 - [Nome do Requisito]
**Como** [tipo de usu√°rio]
**Eu quero** [a√ß√£o/funcionalidade]
**Para que** [benef√≠cio/valor]

**Crit√©rios de Aceite:**
- [ ] [Crit√©rio espec√≠fico e test√°vel]
- [ ] [Crit√©rio espec√≠fico e test√°vel]

## Requisitos N√£o Funcionais
[Performance, seguran√ßa, usabilidade, etc.]

## Regras de Neg√≥cio
[Regras espec√≠ficas do dom√≠nio]'

design_template='# [Nome da Funcionalidade] - Design T√©cnico

## Arquitetura

### Vis√£o Geral
[Descri√ß√£o da arquitetura da funcionalidade]

### Componentes
[Liste os principais componentes]

### Fluxo de Dados
[Descreva o fluxo de dados]

## APIs e Interfaces
[Defina APIs, endpoints, contratos]

## Considera√ß√µes T√©cnicas
[Performance, seguran√ßa, patterns a serem usados]'

tasks_template='# [Nome da Funcionalidade] - Plano de Execu√ß√£o

## Fases de Desenvolvimento

### Fase 1: [Nome da Fase]
- [ ] [nome-da-funcionalidade-1.1] [Descri√ß√£o da tarefa] (Estimativa: XhY)
- [ ] [nome-da-funcionalidade-1.2] [Descri√ß√£o da tarefa] (Estimativa: XhY)

### Fase 2: [Nome da Fase]
- [ ] [nome-da-funcionalidade-2.1] [Descri√ß√£o da tarefa] (Estimativa: XhY)
- [ ] [nome-da-funcionalidade-2.2] [Descri√ß√£o da tarefa] (Estimativa: XhY)

## Crit√©rios de Aceite Geral
[Crit√©rios para considerar a feature completa]

## Depend√™ncias
[Liste depend√™ncias de outras features ou sistemas]'

ensure_file ".kiro/specs/_template/requirements.md" "Template de requisitos" "$requirements_template"
ensure_file ".kiro/specs/_template/design.md" "Template de design" "$design_template"
ensure_file ".kiro/specs/_template/tasks.md" "Template de tarefas" "$tasks_template"

# Verificar patterns (se existir)
if [ -d ".kiro/patterns" ]; then
    print_header "PADR√ïES DE C√ìDIGO"
    
    conventions_template='# Conven√ß√µes Gerais de C√≥digo

## Nomenclatura
[Defina padr√µes de nomenclatura]

## Estrutura de Arquivos
[Como organizar arquivos e pastas]

## Coment√°rios e Documenta√ß√£o
[Quando e como comentar c√≥digo]

## Boas Pr√°ticas Gerais
[Pr√°ticas recomendadas para o projeto]'

    ensure_file ".kiro/patterns/README.md" "√çndice dos padr√µes"
    ensure_file ".kiro/patterns/conventions.md" "Conven√ß√µes gerais" "$conventions_template"
    
    # Verificar estrutura de patterns
    if [ ! -d ".kiro/patterns/examples" ]; then
        if [ "$FIX_MODE" = true ]; then
            mkdir -p ".kiro/patterns/examples"
            print_fix "Criado diret√≥rio: .kiro/patterns/examples"
        else
            print_warning "Diret√≥rio .kiro/patterns/examples n√£o encontrado (recomendado)"
        fi
    fi
    
    if [ ! -d ".kiro/patterns/linting" ]; then
        if [ "$FIX_MODE" = true ]; then
            mkdir -p ".kiro/patterns/linting"
            print_fix "Criado diret√≥rio: .kiro/patterns/linting"
        else
            print_warning "Diret√≥rio .kiro/patterns/linting n√£o encontrado (recomendado)"
        fi
    fi
fi

# Verificar scripts de automa√ß√£o
print_header "SCRIPTS DE AUTOMA√á√ÉO"

if [ ! -d ".kiro/scripts" ]; then
    print_warning "Diret√≥rio .kiro/scripts n√£o encontrado (funcionalidades limitadas)"
else
    print_success "Diret√≥rio encontrado: .kiro/scripts"
    
    # Verificar arquivos importantes
    if [ ! -f ".kiro/scripts/package.json" ]; then
        print_warning "package.json n√£o encontrado em scripts/"
    else
        print_success "package.json encontrado"
    fi
    
    if [ ! -f ".kiro/scripts/task-manager.js" ]; then
        print_warning "task-manager.js n√£o encontrado (tracking limitado)"
    else
        print_success "task-manager.js encontrado"
    fi
fi

# Verificar integridade das specs existentes
print_header "INTEGRIDADE DAS ESPECIFICA√á√ïES"

spec_count=0
incomplete_specs=0

for spec_dir in .kiro/specs/*/; do
    if [ -d "$spec_dir" ] && [ "$(basename "$spec_dir")" != "_template" ]; then
        spec_name=$(basename "$spec_dir")
        spec_count=$((spec_count + 1))
        
        missing_files=()
        
        if [ ! -f "$spec_dir/requirements.md" ]; then
            missing_files+=("requirements.md")
        fi
        
        if [ ! -f "$spec_dir/design.md" ]; then
            missing_files+=("design.md")
        fi
        
        if [ ! -f "$spec_dir/tasks.md" ]; then
            missing_files+=("tasks.md")
        fi
        
        if [ ${#missing_files[@]} -eq 0 ]; then
            print_success "Spec completa: $spec_name"
        else
            print_error "Spec incompleta: $spec_name (faltam: ${missing_files[*]})"
            incomplete_specs=$((incomplete_specs + 1))
        fi
    fi
done

if [ $spec_count -eq 0 ]; then
    print_info "Nenhuma especifica√ß√£o encontrada (apenas template existe)"
else
    print_info "Total de specs: $spec_count (completas: $((spec_count - incomplete_specs)), incompletas: $incomplete_specs)"
fi

# Verificar placeholders n√£o substitu√≠dos
print_header "VERIFICA√á√ÉO DE PLACEHOLDERS"

placeholder_files=$(find .kiro -name "*.md" -exec grep -l "\[.*\]" {} \; 2>/dev/null | grep -v "_template" || true)

if [ -n "$placeholder_files" ]; then
    print_warning "Arquivos com placeholders encontrados:"
    echo "$placeholder_files" | while read -r file; do
        placeholders=$(grep -o "\[.*\]" "$file" | head -3 | tr '\n' ' ')
        echo "  $file: $placeholders"
    done
else
    print_success "Nenhum placeholder encontrado (exceto templates)"
fi

# Verificar TODOs pendentes
print_header "TODOs PENDENTES"

todo_count=$(find .kiro -name "*.md" -exec grep -c "TODO\|FIXME\|XXX" {} \; 2>/dev/null | awk '{s+=$1} END {print s+0}')

if [ $todo_count -gt 0 ]; then
    print_warning "$todo_count TODOs encontrados na documenta√ß√£o"
    find .kiro -name "*.md" -exec grep -Hn "TODO\|FIXME\|XXX" {} \; 2>/dev/null | head -5
    if [ $todo_count -gt 5 ]; then
        print_info "... e mais $((todo_count - 5)) TODOs"
    fi
else
    print_success "Nenhum TODO pendente encontrado"
fi

# Verificar configura√ß√µes de projeto
print_header "CONFIGURA√á√ïES DE PROJETO"

# Verificar git
if [ ! -d ".git" ]; then
    print_warning "Projeto n√£o est√° em um reposit√≥rio git"
else
    print_success "Reposit√≥rio git encontrado"
fi

# Verificar .gitignore
if [ ! -f ".gitignore" ]; then
    print_warning "Arquivo .gitignore n√£o encontrado"
else
    print_success "Arquivo .gitignore encontrado"
fi

# Resumo final
print_header "RESUMO DA VALIDA√á√ÉO"

echo "üìä Estat√≠sticas:"
echo "  - Erros: $ERRORS"
echo "  - Avisos: $WARNINGS"
echo "  - Specs encontradas: $spec_count"
echo "  - TODOs pendentes: $todo_count"

if [ $ERRORS -eq 0 ]; then
    if [ $WARNINGS -eq 0 ]; then
        print_success "üéâ Projeto CDD est√° em perfeito estado!"
    else
        print_warning "‚úÖ Projeto CDD est√° funcional, mas h√° algumas melhorias recomendadas"
    fi
else
    print_error "‚ùå Projeto CDD tem problemas que precisam ser corrigidos"
    
    if [ "$FIX_MODE" = false ]; then
        echo ""
        print_info "Execute com --fix para tentar corrigir automaticamente:"
        echo "  $0 --fix"
    fi
fi

# Exit code baseado nos resultados
if [ $ERRORS -gt 0 ]; then
    exit 1
else
    exit 0
fi 